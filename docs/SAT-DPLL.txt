-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package SAT-DPLL
@version 0.1.0.0

module Logic
type Variable = Int
type Literal = Variable
var :: Literal -> Variable
sign :: Literal -> Int
type Clause = [Literal]
type KB = [Clause]

module Heuristics
type Heuristic = KB -> [Variable] -> [Variable]
identity :: Heuristic

module Preprocessing

-- | <b>(dimacs f)</b> is the pair (<i>ps</i>,<i>vs</i>) where ps is the
--   set of formulas wich corresponds to the formula in DIMACS format
--   writed in the file <i>f</i> and <i>vs</i> is the list of variables
--   wich occurs in any propositional formula.
dimacs :: FilePath -> IO KB

module DPP
dPP :: FilePath -> IO Bool
dpp :: Heuristic -> KB -> Bool
dpp' :: Foldable t => t [Literal] -> [Literal] -> Heuristic -> Bool
dppAux1 :: (Num a, Eq a, Foldable t) => t a -> [[a]] -> [[a]]
dppAux2 :: (Eq a, Foldable t2, Foldable t1) => t1 a -> [t2 a] -> [t2 a]
partitionL :: (Eq a, Foldable t2, Foldable t1) => t1 t2 a -> a -> ([t2 a], [t2 a])
literalsKB :: KB -> Set Literal
literals :: Clause -> Set Literal -> Set Literal
varsKB :: KB -> Set Variable
vars :: Clause -> Set Variable -> Set Variable

module DPLL
dPLL :: FilePath -> IO Bool
dpll :: Heuristic -> KB -> Bool
dpll' :: Foldable t => t [Literal] -> [Literal] -> Heuristic -> Bool
dpllAux1 :: (Num a, Eq a, Foldable t) => t a -> [[a]] -> [[a]]
dpllAux2 :: (Eq a, Foldable t2, Foldable t1) => t1 a -> [t2 a] -> [t2 a]
partitionL :: (Eq a, Foldable t2, Foldable t1) => t1 t2 a -> a -> ([t2 a], [t2 a])
literalsKB :: KB -> Set Literal
literals :: Clause -> Set Literal -> Set Literal
varsKB :: KB -> Set Variable
vars :: Clause -> Set Variable -> Set Variable
